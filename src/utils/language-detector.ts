import MarkdownIt from 'markdown-it'

export const SUPPORTED_LANGUAGES = [
  "abap",
  "actionscript-3",
  "ada",
  "angular-html",
  "angular-ts",
  "apache",
  "apex",
  "apl",
  "applescript",
  "ara",
  "asciidoc",
  "asm",
  "astro",
  "awk",
  "ballerina",
  "bat",
  "beancount",
  "berry",
  "bibtex",
  "bicep",
  "blade",
  "bsl",
  "c",
  "cadence",
  "cairo",
  "clarity",
  "clojure",
  "cmake",
  "cobol",
  "codeowners",
  "codeql",
  "coffee",
  "common-lisp",
  "coq",
  "cpp",
  "crystal",
  "csharp",
  "css",
  "csv",
  "cue",
  "cypher",
  "d",
  "dart",
  "dax",
  "desktop",
  "diff",
  "docker",
  "dotenv",
  "dream-maker",
  "edge",
  "elixir",
  "elm",
  "emacs-lisp",
  "erb",
  "erlang",
  "fennel",
  "fish",
  "fluent",
  "fortran-fixed-form",
  "fortran-free-form",
  "fsharp",
  "gdresource",
  "gdscript",
  "gdshader",
  "genie",
  "gherkin",
  "git-commit",
  "git-rebase",
  "gleam",
  "glimmer-js",
  "glimmer-ts",
  "glsl",
  "gnuplot",
  "go",
  "graphql",
  "groovy",
  "hack",
  "haml",
  "handlebars",
  "haskell",
  "haxe",
  "hcl",
  "hjson",
  "hlsl",
  "html",
  "html-derivative",
  "http",
  "hxml",
  "hy",
  "imba",
  "ini",
  "java",
  "javascript",
  "jinja",
  "jison",
  "json",
  "json5",
  "jsonc",
  "jsonl",
  "jsonnet",
  "jssm",
  "jsx",
  "julia",
  "kotlin",
  "kusto",
  "latex",
  "lean",
  "less",
  "liquid",
  "llvm",
  "log",
  "logo",
  "lua",
  "luau",
  "make",
  "markdown",
  "marko",
  "matlab",
  "mdc",
  "mdx",
  "mermaid",
  "mipsasm",
  "mojo",
  "move",
  "narrat",
  "nextflow",
  "nginx",
  "nim",
  "nix",
  "nushell",
  "objective-c",
  "objective-cpp",
  "ocaml",
  "pascal",
  "perl",
  "php",
  "plsql",
  "po",
  "polar",
  "postcss",
  "powerquery",
  "powershell",
  "prisma",
  "prolog",
  "proto",
  "pug",
  "puppet",
  "purescript",
  "python",
  "qml",
  "qmldir",
  "qss",
  "r",
  "racket",
  "raku",
  "razor",
  "reg",
  "regexp",
  "rel",
  "riscv",
  "rst",
  "ruby",
  "rust",
  "sas",
  "sass",
  "scala",
  "scheme",
  "scss",
  "sdbl",
  "shaderlab",
  "shellscript",
  "shellsession",
  "smalltalk",
  "solidity",
  "soy",
  "sparql",
  "splunk",
  "sql",
  "ssh-config",
  "stata",
  "stylus",
  "svelte",
  "swift",
  "system-verilog",
  "systemd",
  "talonscript",
  "tasl",
  "tcl",
  "templ",
  "terraform",
  "tex",
  "toml",
  "ts-tags",
  "tsv",
  "tsx",
  "turtle",
  "twig",
  "typescript",
  "typespec",
  "typst",
  "v",
  "vala",
  "vb",
  "verilog",
  "vhdl",
  "viml",
  "vue",
  "vue-html",
  "vue-vine",
  "vyper",
  "wasm",
  "wenyan",
  "wgsl",
  "wikitext",
  "wit",
  "wolfram",
  "xml",
  "xsl",
  "yaml",
  "zenscript",
  "zig"
]
const md = new MarkdownIt()

export function isSupportedLanguage(language: string): boolean {
  return SUPPORTED_LANGUAGES.includes(language)
}
/**
 * 从 Markdown 内容中检测所有使用的代码块语言
 * @param content Markdown 内容
 * @returns 检测到的语言列表（去重）
 */
export function detectLanguages(content: string): string[] {
  try {
    const tokens = md.parse(content, {})
    const languages = new Set<string>()

    tokens.forEach((token) => {
      if (token.type === 'fence' && token.info) {
        // info 可能带参数，比如 "js {lineNumbers}" 或带行号范围如 "javascript{1,5,8-10}"
        let lang = token.info.split(/\s+/)[0].trim()

        // 处理带有行号范围的语言标识符，如 javascript{1,5,8-10}
        const lineNumberMatch = lang.match(/^([^{]+)(?:\{.+\})?$/)
        if (lineNumberMatch && lineNumberMatch[1]) {
          lang = lineNumberMatch[1].trim()
        }
        if (lang) {
          languages.add(lang)
        }
      }
    })

    return Array.from(languages).sort()
  }
  catch (error) {
    console.warn('Language detection failed:', error)
    return []
  }
}
